doctype html
html
  head
    title=title
    meta(charset="utf-8")
    meta(name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width")

    link(rel='stylesheet', href='/stylesheets/style.css')
    script(src="https://d3js.org/d3.v6.min.js")
    script(src="dartboard.js" )
    script(src="dartsmatch.js" )
    //script(src="dartsgui.js" )
    
    header#gameControls
      div.scoreboard
        div.team
          h2#homename Home
          p#homescore 0
        div.game-options
          div.game-select
            label(for="game-selector") Game
            select(id="game-selector" name="game-selector")
              //option(value=1) 301
              //option(value=2) 401
              //option(value=3) 501
              //option(value=4) 601
              //option(value=5) 701
              //option(value=6) 801
              //option(value=7) 901
              //option(value=8) 1001
          div.game-settings
            label(for="bestof-selector") Best of 
            select(id="bestof-selector" name="bestof-selector")
              //option(value=1) 3
              //option(value=2) 5
              //option(value=3) 7
              //option(value=4) 9
              //option(value=5) 11
              //option(value=6) 13
              //option(value=7) 15
              //option(value=8) 17
              //option(value=9) 19
              //option(value=10) 21
              
            div.togglebox#doubleintoggle
              label(for="doublein") Double In
              input(type="checkbox", id="doublein", name="doublein")
            div.togglebox#doubleouttoggle
              label(for="doubleout") Double Out
              input(type="checkbox", id="doubleout", name="doubleout")
          div.game-reset
            button(id='newgame' type='button' value='newgame') New Game
            button(id='nextleg' type='button' value='nextleg') Next Leg
            button(id='reset' type='button' value='reset') Reset
        div.team
          h2#awayname Away
          p#awayscore 0
    body
      div.facade
        div#leftboard.marker
        div#svgContainer.container
        div#rightboard.marker


    block content

    script(type='text/javascript').

      localStorage.setItem('Current Match', DartsMatch  );

      window.onload=function()
      {

        /* Create Game selector dropdown */
        var selector = document.getElementById("game-selector");
        for( const game of Object.entries(DartsMatch.straight_games) )  {

          selector.options[selector.options.length] = new Option(game[0], game[1]);

        }
        /* Create "Best of" selector dropdown */

        selector = document.getElementById("bestof-selector");

        console.log('shitecwb  ll  : ' + selector )
        var shitte=1;
        for( const b of DartsMatch.bestof )  {
          console.log('shite b  IS  : ' + b )
          selector.options[selector.options.length] = new Option(b, shitte++);
        }

            
          //console.log('NUMBER IS  : ' + Object.keys(sector)[0] )

        var svg = d3.select("#svgContainer")
         .append("svg")
         //.attr("preserveAspectRatio", "xMinYMin meet")
     //.attr("viewBox", "0 0 960 500")
     //.attr("style", "outline: thick solid blue;")
         //.attr("width", window.innerWidth)
         .attr("width", "100%")
     //.attr("width", 900)
         .attr("height", window.innerHeight);
         //.attr("height", "100%")

        let sf = 1.2;

        let board = new Board(sf)

        createBoard(board)


        d3.select('#game-selector').on("change", function() {

          //var x = d3.select("#game-selector").node.value;
          var x = d3.select("#game-selector").property("value");

          console.log("Changed game!" + x);

         })

        d3.select("#reset").on("click", function() {


           sessionStorage["currentGame"] = ""
           sessionStorage.setItem("currentGame" , JSON.stringify(new DartsMatch()));

           //let dm  = new DartsMatch();
           //console.log( "DM" + Object.keys(dm) )
           //console.log( Object.keys(sessionStorage.getItem("currentGame")) )
           //console.log( Object.keys(localStorage.getItem("currentGame")) )

        })

        d3.select("#newgame").on("click", function() {

           /* this stuff to go in function */

           /* 
            new game means:
              *  get game type (301, etc) from game-selector selector)
              *  get best of (3,5,etc) from bestof-selector selector)
              *  get double in option from doublein checkbox (normally 301 only)
              *  get double out option from doublein checkbox (only for noobs)
           */

           var gs = document.getElementById("game-selector");
           var gametype = gs.options[gs.selectedIndex].text;

           console.log( "Gtype " + gametype)  /* this is it */


           var bs = document.getElementById("bestof-selector");
           var bestof = bs.options[bs.selectedIndex].text;

           console.log( "bestof text" + bestof)  /* this is it */
 

           let current_game = JSON.parse(sessionStorage.getItem("currentGame"))
           //localStorage.setItem('Current Match').type = game;

           console.log( current_game )
           console.log( current_game.hometeam + " vs " + current_game.awayteam )

           //var gselector = document.getElementById("game-selector");
           //var gametype = gselector.options[gselector.selectedIndex].text;
           //console.log( "TYPE " + gametype + " index : " + )
           //var x = d3.select("#game-selector").text

           //console.log( Object.entries(DartsMatch.straight_games ) );


           d3.select("#homename").text(current_game.hometeam).style('color', 'blue');
           d3.select("#awayname").text(current_game.awayteam).style('color', 'red');
           d3.select("#homescore").text(gametype).style('color', 'yellow');
           d3.select("#awayscore").text(gametype).style('color', 'yellow');

           d3.select('h2').style('color', 'red');




        })

      }



      

      function createBoard(board)
      {
      
        let radius = (board.getDoubleOuter() + board.getBorder() );
      
        let cx = 350;
        let cy = 300;
      
        board.setOrigin(cx,cy)
      
        console.log("drawBoard")
        console.log("Radius " + radius )
      
        let svg = d3.select('svg')
      
        svg.append("g")
      
        // Draw board background
        // svg.append("circle")

        d3.select('g').append("circle")
                  .attr("cx", cx)
                  .attr("cy", cy)
                  .attr("r", radius)
                  .attr("fill", board.dartsBlack )

        console.log("Board " + board )
            
        let board_sectors = board.getSectors();
            
        for( const sector of board_sectors )  {
            
          //console.log('NUMBER IS  : ' + Object.keys(sector)[0] )
            
          drawSector(cx,cy,sector,board)
        }
            
        drawTwentyFive(cx,cy,board)
            
        drawBull(cx,cy,board)
            
        svg.on("click", function() {
          var x = board.dartInBoard( d3.pointer(event)[0], d3.pointer(event)[1]);
          setScore(x)
            
        })
            
      }
      
      function drawSector(cx,cy,sector,board)
      {
      
         //Draw double
         drawDouble(cx,cy,sector,board);
      
      
         //Draw big number (if white)
      
         drawBigNumber(cx,cy,sector,board);
      
      
         //Draw treble
         drawTreble(cx,cy,sector,board);
      
         //Draw small number (if white)
      
         drawSmallNumber(cx,cy,sector,board);
      
      /*
         drawNumber(cx,cy,sector);
      */
      
      }
      
      function drawDouble(cx,cy,sector,board)
      {
      
        //console.log('DrawDouble  ' + Object.keys(sector)[0] + ' : '  + sector[Object.keys(sector)[0]][0] + ' ( ' + sector[Object.keys(sector)[0]][0]*(180/Math.PI) + ')' + ' : '  + sector[Object.keys(sector)[0]][1] + ' ( ' + sector[Object.keys(sector)[0]][1]*(180/Math.PI) + ')')
      
        let svg = d3.select('svg')
      
        var arc = d3.arc()
            .innerRadius(board.getDoubleInner())
            .outerRadius(board.getDoubleOuter())
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
        ////console.log( "White " + board.WHITE + " Black " + board.BLACK )
        //console.log( "col = " +sector[Object.keys(sector)[0]][2] );
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsGreen )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
                      .attr("stroke", board.dartsWire )
                      .attr("stroke-width", board.wireWidth );
        } else {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsRed )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
                      .attr("stroke", board.dartsWire )
                      .attr("stroke-width",  board.wireWidth );
        }
      
        return;
      
      }

      function drawTreble(cx,cy,sector,board)
      {
      
        let svg = d3.select('svg')
      
        var arc = d3.arc() 
            .innerRadius(board.getTrebleInner())
            .outerRadius(board.getTrebleOuter()) 
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) {
          svg.append("path") 
            .attr("class", "arc")
            .attr("d", arc) 
            .attr("fill", board.dartsGreen )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth ) 
            .attr("id", "N" + Object.keys(sector)[0] ) //Unique id of the path
        } else {
          svg.append("path") 
            .attr("class", "arc")
            .attr("d", arc) 
            .attr("fill", board.dartsRed )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth ) 
            .attr("id", "N" + Object.keys(sector)[0] ) //Unique id of the path
        }
      }

      function drawBigNumber(cx,cy,sector,board)
      {
      
        let svg = d3.select('svg')
      
        var arc = d3.arc()
            .innerRadius(board.getTrebleOuter())
            .outerRadius(board.getDoubleInner())
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) { 
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsWhite )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        } else {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsBlack )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        }
      
      }
      function drawSmallNumber(cx,cy,sector,board)
      {
      
        let svg = d3.select('svg')
      
        var arc = d3.arc()
            .innerRadius(board.getTwentyFiveOuter())
            .outerRadius(board.getTrebleInner())
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) { 
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsWhite )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        } else {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsBlack )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        }
      
      }


      function drawTwentyFive(cx,cy,board)
      {
      
          let svg = d3.select('svg')
            .append("circle")
            .attr("cx", cx)
            .attr("cy", cy)
            .attr("r", board.getTwentyFiveOuter())
            .attr("fill", board.dartsGreen) 
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
      }
      
      function drawBull(cx,cy,board)
      {
      
          //console.log("Draw BUll " + board.getBullOuter() )
      
          let svg = d3.select('svg')
            .append("circle")
            .attr("cx", cx)
            .attr("cy", cy)
            .attr("r", board.getBullOuter())
            .attr("fill", board.dartsRed)
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
      }

      function setScore(x) {

          console.log( "You got "+ x );
          d3.select('#homescore').text(x)

          //d3.selectAll("svg text").each(function(d, i) {
            //d3.select(this).text("New");
          //});

          // team = getCurrentPlayer()
      }




