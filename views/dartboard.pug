doctype html
html
  head
    title=title
    meta(charset="utf-8")
    meta(name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width")

    link(rel='stylesheet', href='/stylesheets/style.css')
    script(src="https://d3js.org/d3.v6.min.js")
    script(src="dartboard.js" )
    script(src="scoreboard.js" )
    script(src="dartsgame.js" )
    
    header#gameControls
      div.scoreboard

        div.team#home
          div.throwdisplay
            div.throw_indicator
          div#homelegs
          h2.teamname#homename Home
          p#homescore 0
          p#homeremaining 
        div.game-options

          div.game-select

            label(for="game-selector") Game
            select(id="game-selector" name="game-selector")

          div.game-settings

            label(for="bestof-selector") Best of 
            select(id="bestof-selector" name="bestof-selector")
              
            div.togglebox#doubleintoggle

              label(for="doublein") Double In
              input(type="checkbox", id="doublein", name="doublein")

            div.togglebox#doubleouttoggle

              label(for="doubleout") Double Out
              input(type="checkbox", id="doubleout", name="doubleout")

            div.togglebox#showhintstoggle

              label(for="doubleout") Show Hints
              input(type="checkbox", id="showhints", name="showhints")

          div.game-reset

            button(id='newgame' type='button' value='newgame') New Game
            button(id='nextleg' type='button' value='nextleg') Next Leg
            button(id='reset' type='button' value='reset') Reset

        div.team#away
          div.throwdisplay
            div.throw_indicator
          div#awaylegs
          h2.teamname#awayname Away
          p#awayscore 0
          p#awayremaining 
    body
      div.facade
        div#leftboard.marker
          div.tally#hometally Home
          
        div#svgContainer.container
        div#rightboard.marker
          div.tally#awaytally Away


    block content

    script(type='text/javascript').

      //localStorage.setItem('Current Game', DartsGame  );

      DEBUG = 1;

      window.onload=function()
      {

        /* 
         * Create Game selector dropdown
        */

        var selector = document.getElementById("game-selector");
        for( const game of Object.entries(DartsGame.straight_games) )  {

          selector.options[selector.options.length] = new Option(game[0], game[1]);

        }

        /* 
         * Create "Best of" selector dropdown 
        */
        // OPTIONS

        selector = document.getElementById("bestof-selector");

        var nlegs=1;

        for( const b of DartsGame.bestof )  {

          selector.options[selector.options.length] = new Option(b, nlegs++);

        }

        /*
         * Create the SVG conatiner for the dartboard
        */

        var svg = d3.select("#svgContainer")
         .append("svg")
         //.attr("preserveAspectRatio", "xMinYMin meet")
         //.attr("viewBox", "0 0 960 500")
         //.attr("style", "outline: thick solid blue;")
         //.attr("width", window.innerWidth)
         .attr("width", "100%")
         //.attr("width", 900)
         .attr("height", window.innerHeight);
         //.attr("height", "100%")

        let sf = 1.2;

        /*
         * Create the Dart board
        */

        window.board = new Board(sf)


        createBoard(window.board)

        /*
         * Create the score boards board
        */

        window.scoreboard = new ScoreBoard()

        /*
         * Initialise the Options GUI ?
        */

        // OPTIONS
        d3.select('#game-selector').on("change", function() {

          var x = d3.select("#game-selector").property("value");

          debug("Changed game to: " + x  );

        })

        d3.select("#reset").on("click", function() {

          debug("Clicked Reset " );
        })

        // OPTIONS

        d3.select("#newgame").on("click", function() {

          debug("Clicked New Game " );

          /*
           * Have clicked on 'New Game'
          */

          /* this stuff to go in function */

          /* 
           *  a new game means doing:
           *  
           *  a) get game type (301, etc) from game-selector selector)
           *  b) get best of (3,5,etc) from bestof-selector selector)
           *  c) get double in option from doublein checkbox (normally 301 only)
           *  d) Create Game 
           *  e) set team to throw first - default to home team ?
           *  f) Set game 'in play'
           *  
           *  maybe get double out option from doublein checkbox (only for noobs)
           *
           */

          //sessionStorage["currentGame"] = ""


          /*
           *  a) get game type (301, etc) from game-selector selector
           */

          var gs = document.getElementById("game-selector");
          var gametype = gs.options[gs.selectedIndex].text;


          /*
           *  b) get best of (3,5,etc) from bestof-selector selector
           */

          var bs = document.getElementById("bestof-selector");
          var bestof = parseInt(bs.options[bs.selectedIndex].text);

          /*
           *  c) get double in option from doublein checkbox 
           */

          var doublein = document.getElementById("doublein").checked;


          debug( gametype + " bestof " + bestof + " double start ? "+ doublein); 


          /*
           *  d) Create game
           */
        
          window.thismatch = {}; /* Place holder until Match class developed */

          window.thismatch.current_game = new DartsGame( {
                                           hometeam: "Scoundrels",
                                           awayteam:"Rotters" ,
                                           type:  gametype, 
                                           nlegs: bestof,
                                           double_in: doublein 
                                           } );

            
          /*
           *  e) Set team to throw first - default to home team ?
           *     could be bull start so need to make variable.
           */

          var first_leg_start = "home";  

          window.thismatch.current_game.setGotThrow(first_leg_start);

          debug( "First throw  "+ first_leg_start); 

          /*
           *  f) Set game in play
          */
          window.thismatch.current_game.setInPlay(1);


          /**********************
           ** SCOREBOARD STUFF **
          ***********************/

          /* 
           * Initialise scoreboard 
          */

          window.scoreboard.init(first_leg_start)

          debug("New Game " +  JSON.stringify(window.thismatch.current_game) );

          /* Team names - will have already been filled in ? */

          /* 
           * Display team/player names
          */

          d3.select("#homename").text(window.thismatch.current_game.hometeam.teamname);
          d3.select("#awayname").text(window.thismatch.current_game.awayteam.teamname);

          /* 
           * Init display team/player starting score
          */
          d3.select("#homescore").text(gametype);
          d3.select("#awayscore").text(gametype);
          d3.select("#homeremaining").text("("+gametype+")");
          d3.select("#awayremaining").text("("+gametype+")");
          //d3.select('h2').style('color', 'blue');


        })

      }
      
      function createBoard(board)
      {
      
        console.log("Trace " + arguments.callee.name );

        let radius = (board.getDoubleOuter() + board.getBorder() );
      
        let cx = 350;
        let cy = 300;
      
        board.setOrigin(cx,cy)
      
        console.log("drawBoard")
        console.log("Radius " + radius )
      
        let svg = d3.select('svg')
      
        svg.append("g")
      
        // Draw board background
        // svg.append("circle")

        d3.select('g').append("circle")
                  .attr("cx", cx)
                  .attr("cy", cy)
                  .attr("r", radius)
                  .attr("fill", board.dartsBlack )

        console.log("Board " + board )
            
        let board_sectors = board.getSectors();
            
        for( const sector of board_sectors )  {
            
          //console.log('NUMBER IS  : ' + Object.keys(sector)[0] )
            
          drawSector(cx,cy,sector,board)
        }
            
        drawTwentyFive(cx,cy,board)
            
        drawBull(cx,cy,board)
            
        svg.on("click", function() { 
          window.thismatch.current_game.processThrow(event);
        });

            
      }
      
      function drawSector(cx,cy,sector,board)
      {
      
         //Draw double
         drawDouble(cx,cy,sector,board);
      
         //Draw big number (if white)
      
         drawBigNumber(cx,cy,sector,board);
      
         //Draw treble
         drawTreble(cx,cy,sector,board);
      
         //Draw small number (if white)
      
         drawSmallNumber(cx,cy,sector,board);
      
      }
      
      function drawDouble(cx,cy,sector,board)
      {
      
      
        let svg = d3.select('svg')
      
        var arc = d3.arc()
            .innerRadius(board.getDoubleInner())
            .outerRadius(board.getDoubleOuter())
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsGreen )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
                      .attr("stroke", board.dartsWire )
                      .attr("stroke-width", board.wireWidth );
        } else {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsRed )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
                      .attr("stroke", board.dartsWire )
                      .attr("stroke-width",  board.wireWidth );
        }
      
        return;
      
      }

      function drawTreble(cx,cy,sector,board)
      {
      
        let svg = d3.select('svg')
      
        var arc = d3.arc() 
            .innerRadius(board.getTrebleInner())
            .outerRadius(board.getTrebleOuter()) 
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) {
          svg.append("path") 
            .attr("class", "arc")
            .attr("d", arc) 
            .attr("fill", board.dartsGreen )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth ) 
            .attr("id", "N" + Object.keys(sector)[0] ) //Unique id of the path
        } else {
          svg.append("path") 
            .attr("class", "arc")
            .attr("d", arc) 
            .attr("fill", board.dartsRed )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth ) 
            .attr("id", "N" + Object.keys(sector)[0] ) //Unique id of the path
        }
      }

      function drawBigNumber(cx,cy,sector,board)
      {
      
        let svg = d3.select('svg')
      
        var arc = d3.arc()
            .innerRadius(board.getTrebleOuter())
            .outerRadius(board.getDoubleInner())
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) { 
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsWhite )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        } else {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsBlack )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        }
      
      }
      function drawSmallNumber(cx,cy,sector,board)
      {
      
        let svg = d3.select('svg')
      
        var arc = d3.arc()
            .innerRadius(board.getTwentyFiveOuter())
            .outerRadius(board.getTrebleInner())
            .startAngle(  sector[Object.keys(sector)[0]][0])
            .endAngle( sector[Object.keys(sector)[0]][1] )
      
      
        if(sector[Object.keys(sector)[0]][2] == board.WHITE) { 
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsWhite )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        } else {
          svg.append("path")
            .attr("class", "arc")
            .attr("d", arc)
            .attr("fill", board.dartsBlack )
            .attr('transform', 'translate(' + cx + ',' +cy+')')
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
        }
      }

      function drawTwentyFive(cx,cy,board)
      {
      
          let svg = d3.select('svg')
            .append("circle")
            .attr("cx", cx)
            .attr("cy", cy)
            .attr("r", board.getTwentyFiveOuter())
            .attr("fill", board.dartsGreen) 
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
      }
      
      function drawBull(cx,cy,board)
      {
      
          //console.log("Draw BUll " + board.getBullOuter() )
      
          let svg = d3.select('svg')
            .append("circle")
            .attr("cx", cx)
            .attr("cy", cy)
            .attr("r", board.getBullOuter())
            .attr("fill", board.dartsRed)
            .attr("stroke", board.dartsWire )
            .attr("stroke-width",  board.wireWidth );
      }

      function debug(s) {
        if(DEBUG) {
            console.log("dbg: " + s);
          }
      }


 
